import streamlit as st
import pandas as pd
import sqlparse
import psycopg2
from urllib.parse import urlparse

# PostgreSQL Database connection using Streamlit secrets
def create_connection():
    try:
        # Retrieve the database URL from Streamlit secrets
        url = st.secrets["postgresql"]["DB_URL"]
        
        # Parse the URL to extract connection parameters
        parsed_url = urlparse(url)
        
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(
            host=parsed_url.hostname,
            database=parsed_url.path[1:],  # Remove leading '/'
            user=parsed_url.username,
            password=parsed_url.password,
            port=parsed_url.port
        )
        return conn
    except Exception as e:
        st.error(f"Error connecting to the database: {e}")
        return None


# Execute SQL query and return results as DataFrame
def execute_sql_query(query):
    conn = create_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute(query)
            columns = [desc[0] for desc in cur.description]
            result = cur.fetchall()
            cur.close()
            conn.close()
            return pd.DataFrame(result, columns=columns)  # Return DataFrame
        except Exception as e:
            st.error(f"Error executing query: {e}")
            return pd.DataFrame()  # Return an empty DataFrame in case of error
    else:
        return pd.DataFrame()  # Return an empty DataFrame if connection fails

# Welcome section for SQL Galaxy
st.title("Welcome to SQL GALAXY")
st.subheader("One small query for developers, one giant JOIN for database kind")
st.write("""
    In this game, you will be tested on your SQL knowledge across various difficulty levels. 
    Choose a tab to begin your journey and solve SQL challenges in space!
""")
st.image("images/rocket.png", caption="Ready to launch your SQL skills into space! *Image Generated by ChatGPT4")

# Tabs for SQL overview and Tips and Tricks
tabs = st.tabs(["What is SQL?", "Easy SQL Tips", "Intermediate - Joins", "Advanced - Subqueries"])

# "What is SQL?" Tab
with tabs[0]:
    st.header("What is SQL?")
    st.write("""
    SQL (Structured Query Language) is a standard programming language designed for managing and manipulating relational databases. 
    It allows users to interact with databases through tasks like retrieving data, updating records, inserting new data, and deleting records.

    SQL is essential for interacting with databases and serves as the backbone for modern data storage systems, including e-commerce platforms, data warehouses, and cloud databases.
    
    Key tasks you can perform with SQL include:
    - **Querying data** from a database using `SELECT`
    - **Inserting records** using `INSERT`
    - **Updating existing records** using `UPDATE`
    - **Deleting records** from a table using `DELETE`
    
    Example:
    ```sql
    SELECT * FROM planets;
    ```
    
    SQL has several dialects such as:
    - **PostgreSQL**: Used for advanced SQL queries and large-scale database systems.
    - **MySQL**: Widely used in web applications and open-source projects.
    - **SQLite**: A lightweight database often used for mobile apps.
    """)
    
# Easy Tips Tab
with tabs[1]:
    st.header("Easy SQL Tips")
    st.write("""
    These basic commands will help you get started with SQL:

    - **SELECT**: Retrieve data from a table.
    - **WHERE**: Filter records based on specific conditions.
    - **ORDER BY**: Sort the result set by one or more columns.
    - **GROUP BY**: Group rows that have the same values into summary rows.
    - **COUNT**: Returns the number of rows that match a criterion.
    - **SUM**: Add up numeric values in a column.
    - **MIN/MAX**: Get the minimum or maximum value from a column.
    
    Example: 
    ```sql
    SELECT * FROM planets WHERE distance_from_sun > 100;
    ```
    
    You can also use **joins** to combine data from multiple tables:
    ```sql
    SELECT planet_name, moon_name FROM planets
    INNER JOIN moons ON planets.planet_id = moons.planet_id;
    ```
    """)

# Intermediate Joins Tab
with tabs[2]:
    st.header("Intermediate - Joins")
    st.write("""
    SQL joins allow you to combine data from two or more tables based on related columns. There are several types of joins:

    - **INNER JOIN**: Select records that have matching values in both tables.
    - **LEFT JOIN**: Select all records from the left table, and the matched records from the right table. NULL for unmatched.
    - **RIGHT JOIN**: Select all records from the right table, and the matched records from the left table. NULL for unmatched.
    - **FULL OUTER JOIN**: Select all records where there is a match in either left or right table.
    
    Example:
    ```sql
    SELECT p.planet_name, m.moon_name 
    FROM planets p 
    INNER JOIN moons m 
    ON p.planet_id = m.planet_id;
    ```

    Advanced tips:
    - **Self Joins**: Join a table with itself to compare rows within the same table.
      ```sql
      SELECT a.planet_name, b.planet_name 
      FROM planets a 
      JOIN planets b 
      ON a.distance_from_earth > b.distance_from_earth;
      ```
    - **Optimizing Joins**: Ensure the columns used in joins are indexed to improve performance in large datasets.
    """)

# Advanced Subqueries Tab
with tabs[3]:
    st.header("Advanced - Subqueries")
    st.write("""
    A subquery is a query nested inside another query. These are useful for more complex logic or data filtering.

    - **Scalar Subquery**: Returns a single value.
    - **IN Subquery**: Used to filter results based on a set of values.
    - **EXISTS Subquery**: Used to test for the existence of rows.

    You can also use **CTEs (Common Table Expressions)** to break down complex queries into simpler steps.
    
    Example:
    ```sql
    WITH moon_counts AS (
      SELECT planet_id, COUNT(moon_id) AS num_moons 
      FROM moons 
      GROUP BY planet_id
    )
    SELECT planet_name, num_moons 
    FROM planets 
    INNER JOIN moon_counts 
    ON planets.planet_id = moon_counts.planet_id;
    ```

    Recursive subqueries are also used to process hierarchical data like organizational charts or tree structures.
    """)

# Section to direct users to try solving problems
st.subheader("Time to Test Your SQL Knowledge!")
st.write("""
    Now that you've reviewed the SQL tips and tricks, it's time to test your knowledge by solving real-world problems.
    
    Use the **side navigation** to select one of the difficulty levels:
    
    - **Milky Way** (Easy)
    - **Hydra Cluster** (Intermediate)
    - **Hercules Supercluster** (Advanced)
    
    Each difficulty tier contains multiple SQL challenges to help you practice your skills. Good luck, and may your queries always return the right results!
""")



# Planets Table as Markdown
planets_table = """
| Planet ID (PK) | Planet Name | Distance from Sun (million km) | Discoverer | Year of Discovery |
|----------------|-------------|-------------------------------|------------|-------------------|
| 1              | Mercury     | 57.9                          | Unknown    | Ancient           |
| 2              | Venus       | 108.2                         | Galileo    | 1610              |
| 3              | Earth       | 149.6                         | NULL       | NULL              |
| 4              | Mars        | 227.9                         | Unknown    | Ancient           |
| 5              | Jupiter     | 778.5                         | Galileo    | 1610              |
| 6              | Saturn      | 1427                          | Galileo    | 1610              |
| 7              | Uranus      | 2871                          | Herschel   | 1781              |
| 8              | Neptune     | 4497                          | Galle      | 1846              |
"""

# Missions Table as Markdown
missions_table = """
| Mission ID (PK) | Mission Name    | Planet ID (FK) | Crew Size | Mission Date |
|-----------------|-----------------|----------------|-----------|--------------|
| 1               | Pioneer 10      | 5              | 1         | 1972-03-02   |
| 2               | Voyager 1       | 5              | 3         | 1977-09-05   |
| 3               | Mars Pathfinder | 4              | 2         | 1996-12-04   |
| 4               | Cassini         | 6              | 5         | 1997-10-15   |
| 5               | New Horizons    | 9              | 2         | 2006-01-19   |
"""

# Moons Table as Markdown
moons_table = """
| Moon ID (PK) | Moon Name | Diameter (km) | Planet ID (FK) | Discoverer | Year of Discovery |
|--------------|-----------|---------------|----------------|------------|-------------------|
| 1            | Moon      | 3474          | 3              | NULL       | Ancient           |
| 2            | Phobos    | 22.4          | 4              | Hall       | 1877              |
| 3            | Deimos    | 12.4          | 4              | Hall       | 1877              |
| 4            | Europa    | 3121.6        | 5              | Galileo    | 1610              |
| 5            | Titan     | 5149.5        | 6              | Huygens    | 1655              |
| 6            | Charon    | 1212          | 9              | Christy    | 1978              |
"""

# Display the tables using Markdown
st.title('Schema with Primary Keys')

st.subheader('üåç Planets Table')
st.markdown(planets_table)

st.subheader('üöÄ Missions Table')
st.markdown(missions_table)

st.subheader('üåï Moons Table')
st.markdown(moons_table)
