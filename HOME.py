import streamlit as st
import pandas as pd
import sqlparse
import psycopg2
import time
from urllib.parse import urlparse

# PostgreSQL Database connection using Streamlit secrets
def create_connection():
    try:
        # Retrieve the database URL from Streamlit secrets
        url = st.secrets["postgresql"]["DB_URL"]
        
        # Parse the URL to extract connection parameters
        parsed_url = urlparse(url)
        
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(
            host=parsed_url.hostname,
            database=parsed_url.path[1:],  # Remove leading '/'
            user=parsed_url.username,
            password=parsed_url.password,
            port=parsed_url.port
        )
        return conn
    except Exception as e:
        st.error(f"Error connecting to the database: {e}")
        return None


# Execute SQL query and return results as DataFrame
def execute_sql_query(query):
    conn = create_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute(query)
            columns = [desc[0] for desc in cur.description]
            result = cur.fetchall()
            cur.close()
            conn.close()
            return pd.DataFrame(result, columns=columns)  # Return DataFrame
        except Exception as e:
            st.error(f"Error executing query: {e}")
            return pd.DataFrame()  # Return an empty DataFrame in case of error
    else:
        return pd.DataFrame()  # Return an empty DataFrame if connection fails


# Welcome section for SQL Galaxy
st.title("Welcome to SQL GALAXY")
st.write('---')
st.subheader("One small query for developers, one giant JOIN for database kind")
st.image("images/rocket.png", caption="Welcome to SQL Galaxy!*Image Generated by ChatGPT4")

# Tabs for SQL overview and Tips and Tricks
tabs = st.tabs(["What is SQL?", "Beginner SQL Tips", "Intermediate SQL Tips (Joins)", "Advanced SQL Tips (Subqueries)"])

# "What is SQL?" Tab
with tabs[0]:
    st.header("What is SQL?")
    st.write("""
    SQL (Structured Query Language) is the standard language used to interact with relational databases, which store data in tables consisting of rows and columns.

    ### What is a Database?
    In a database, a **table** is a collection of related data organized in rows and columns. Each table typically represents an entity (such as `Planets` or `Missions`), and the rows represent individual records, while the columns represent different attributes of the data.
    For example, in a `planets` table, columns might include `planet_id`, `planet_name`, and `distance_from_earth`.

    ### Relational Databases
    A **relational database** organizes data into tables with rows and columns, where each table represents an entity (e.g., `planets`, `missions`). These tables are related to each other through keys.

    ### Primary Key
    A **primary key** is a column (or set of columns) that uniquely identifies each record in a table. For example, `planet_id` in the `planets` table is a primary key, ensuring each planet has a unique identifier.

    ### Foreign Key
    A **foreign key** is a column in one table that refers to the primary key in another table, establishing a relationship between the two. For instance, the `planet_id` in the `missions` table is a foreign key that references the `planet_id` in the `planets` table, linking missions to specific planets.

             
    ### How SQL Works:
    SQL follows a client-server model. A user sends a query (like `SELECT * FROM planets`) to the database server, which processes the query and returns the requested data. This interaction allows for seamless communication between applications and data storage systems.
             
    ### Popular SQL Databases:
    - **PostgreSQL**: Known for advanced querying capabilities and support for complex operations.
    - **MySQL**: Popular for web applications, especially with PHP.
    - **SQL Server**: A Microsoft product used in enterprise environments for high scalability and security.

    ### SQL's Core Role:
    SQL enables efficient data management, allowing users to store, retrieve, and manipulate large datasets. It powers the backend of modern applications, from e-commerce platforms to social media, and plays a vital role in decision-making and data analytics.

    ### Real-World Use Cases:
    - **E-commerce**: Manage inventory, customer data, and orders.
    - **Finance**: Track transactions and generate reports for analysis.
    - **Healthcare**: Store patient records and medical data.
    - **Business Intelligence**: Query and analyze big data for strategic decisions.

    ### A Brief History of SQL:
    SQL was developed in the 1970s by IBM and became the standard for database management. Today, it's supported by almost every major database system, including PostgreSQL, MySQL, and SQL Server.

    SQL has been the foundation of data-driven systems for decades, making it a crucial skill in the data management landscape.
    """)

    # Add the "Ready to Begin Your SQL Journey?" prompt only in this tab
    st.write("---")  # Add a divider for separation
    st.markdown("<h2 style='text-align: center;'>ðŸš€ Ready to Start Your SQL Journey?</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>Scroll up and select the <em>Beginner Tips</em> tab to get started or test your skills in the Milky Way, Hydra Cluster, or Hercules Supercluster!</h3>", unsafe_allow_html=True)


# Easy SQL Tips Tab
with tabs[1]:
    st.title("Beginner SQL Objectives:""")

    st.write("""
    1. SELECT/FROM
    2. COMPARISON OPERATORS
    3. WHERE/LIKE
    4. AND/OR
    5. COUNT
    """)

    st.write("""
    Learning these basic SQL commands will help you retrieve and filter data from your database. Let's go over each concept with examples, hints, and expected outputs.
    """)         

    st.write('---')

    st.header("1 - SELECT/FROM")
    st.write("- **SELECT**")
    st.write("The `SELECT` statement tells the database which columns you want to retrieve. You can either specify individual columns or use an asterisk (`*`) to select all columns from the table.")
    st.write("- **FROM**:")
    st.write("The `FROM` clause specifies the table from which to retrieve data. After using `SELECT` to specify the columns, you use `FROM` to tell SQL where to look.")


    st.subheader("""
    EXAMPLE 1: 
    Retrieve all the planet names from the PLANETS table
    ```sql
    SELECT planet_name FROM planets;
    ```
    This query will rerieve all the planet names in the `planets` table.
             
    **Expected Output**:
    | planet_name |
    |-------------|
    | Venus       |
    | Mars        |
    | Jupiter     |
    | Saturn      |
    | Neptune     |
    | Pluto       |
    | Uranus      |
    | Mercury     |
    | Earth       |

    """)

    st.write("\n" * 5)

    st.write("""
    ### EXAMPLE 2: 
    Retrieve all the columns from the PLANETS table
    ```sql
    SELECT * FROM planets;
    """)
    
    st.write("""This query will retrieve all columns from the `planets` table.
    """)

    st.write("""
            **Expected Output**:
    | planet_id | planet_name | distance_from_earth | discoverer            | discovery_year |
    |-----------|-------------|---------------------|-----------------------|----------------|
    | 1         | Venus       | 108                 | Babylonians           | -500           |
    | 2         | Mars        | 227.9               | Galileo               | 1610           |
    | 3         | Jupiter     | 778                 | Galileo               | 1610           |
    | 4         | Saturn      | 1,433               | Huygens               | 1655           |
    | 5         | Neptune     | 4,495               | Le Verrier            | 1846           |
    | 6         | Pluto       | 5,906               | Tombaugh              | 1930           |
    | 7         | Uranus      | 2,871               | William Herschel      | 1781           |
    | 8         | Mercury     | 77                  | Known since antiquity | None           |
    | 9         | Earth       | 0                   | Known since antiquity | None           |

    """)
             
    st.write("\n" * 5)

   

    st.write("---")


 
    st.header("2 - COMPARISON OPERATORS")
    st.write("""
    Comparison operators are used in SQL to compare two values. They are typically used in `WHERE` clauses to filter data. Common comparison operators include:

    - `=` : Equal to
    - `!=` or `<>` : Not equal to
    - `>` : Greater than
    - `<` : Less than
    - `>=` : Greater than or equal to
    - `<=` : Less than or equal to
    """)

    st.write("---")

    # WHERE Clause section
    st.header("3 - WHERE/LIKE")
    st.write("- **WHERE**")
    st.write("""
    The `WHERE` clause is used to filter records in SQL. It allows you to specify conditions that must be met for rows to be included in the result set.

    You can use the `WHERE` clause with comparison operators (e.g., `=`, `>`, `<`, etc.) to narrow down your results.
    """)

# Example using WHERE Clause
    st.subheader("EXAMPLE:") 
    st.write("Retrieve all missions where the crew size is greater than 3")
    st.write("""
    ```sql
    SELECT * FROM missions WHERE crew_size > 3;
    """)
    st.write("""
    **Expected Output**:
    | mission_id | planet_id | mission_name     | mission_date | crew_size |
    |------------|-----------|------------------|--------------|-----------|
    | 0          | 1         | Mars Rover Mission | 2004-01-04  | 6         |
    | 1          | 1         | Mars Pathfinder   | 1997-07-04  | 5         |
    | 2          | 3         | Jupiter Probe     | 1973-12-03  | 8         |
    | 3          | 5         | Neptune Explorer  | 1989-08-25  | 7         |
    | 4          | 7         | Venus Research    | 1982-03-05  | 4         |

    """)

    st.write("")
    st.write("\n" * 2)  # Adds two blank lines for extra space
    st.write("\n" * 2)  # Adds two blank lines for extra space
    

    st.write("- **LIKE**")
    st.write("""
    The `LIKE` operator in SQL is used for pattern matching in string data. It allows you to search for specific patterns in a column's values. You can use two wildcard characters:
    - `%`: Represents zero or more characters.
    - `_`: Represents a single character.

    The `LIKE` operator is commonly used with the `WHERE` clause to filter results based on patterns.
    """)

    # Example using LIKE
    st.subheader("EXAMPLE:")
    st.write("Retrieve all the moons that start with the letter 'T' ")
    st.write("""
    ```sql
    SELECT moon_name FROM moons WHERE moon_name LIKE 'T%'
    """)
    st.write("""
    | moon_name |
    |-----------|
    | Titan     |
    | Triton    |

    """)

    st.write("---")

    st.header("4 - AND/OR")

    st.write("""
    The `AND` and `OR` operators are used to combine multiple conditions in a `WHERE` clause. These operators help refine search results based on multiple criteria:

    - **AND**: All conditions must be true for a record to be included.
    """)

    st.write("""
    - **OR**: At least one condition must be true for a record to be included.
    """)


    st.subheader("EXAMPLE 1:")
    st.write("Find the mission that took place after the year 1999 AND has a crew size greater than 5")
    st.write("""
    ```sql
    SELECT * FROM missions WHERE mission_date > '1999-12-31' AND crew_size > 5;         
    """)
    st.write("""
    **Expected Output**:
    | mission_id | planet_id | mission_name     | mission_date | crew_size |
    |------------|-----------|------------------|--------------|-----------|
    | 1          | 1         | Mars Rover Mission | 2004-01-04  | 6         |

    """)

    st.subheader("EXAMPLE 2:")
    st.write("Find all the records for planets discovered after 1700 OR further than 1400 from Earth")
    st.write("""
    ```sql
    SELECT * FROM planets WHERE discovery_year > 1700 OR distance_from_earth > 1400;
    """)

    st.write("""
    **Expected Output**:
    | planet_id | planet_name | distance_from_earth | discoverer        | discovery_year |
    |-----------|-------------|---------------------|-------------------|----------------|
    | 3         | Saturn      | 1433                | Huygens           | 1655           |
    | 4         | Neptune     | 4495                | Le Verrier        | 1846           |
    | 5         | Pluto       | 5906                | Tombaugh          | 1930           |
    | 7         | Uranus      | 2871                | William Herschel  | 1781           |

    """)
    st.write('---')

    # Add the COUNT objective
    st.header("5 - COUNT")
    st.write("- **COUNT**")
    st.write("""
    The `COUNT` function returns the number of rows that match a specified condition. It's often used to determine how many rows exist in a table or how many rows satisfy a `WHERE` clause condition.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Count the number of planets in the PLANETS table")
    st.write("""
    ```sql
    SELECT COUNT(*) AS total_planets
    FROM planets;
    ```
    This query counts the total number of rows (planets) in the `planets` table.
    """)

    st.write("""
    **Expected Output**:
    | total_planets |
    |---------------|
    | 9             |
    """)


    st.write("")
    st.write("\n" * 2)  # Adds two blank lines for extra space
    st.write("\n" * 2)  # Adds two blank lines for extra space


    # Add a congratulatory message for completing the beginner objectives
    st.write("---")  # Add a divider for separation
    st.markdown("<h2 style='text-align: center;'>ðŸŽ‰ Congratulations on Completing the Beginner SQL Objectives!</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'Now, test your skills in the <em>Now, test your skills in the Milky Way Beginner Challenge</em> or move to the next tab for <em>Intermediate Tips</em> to learn about SQL Joins!</h3>", unsafe_allow_html=True)



# Intermediate Joins Tab
with tabs[2]:
    st.title("Intermediate SQL Objectives:")

    st.write("""
    1. INNER JOIN
    2. LEFT JOIN
    3. RIGHT JOIN
    4. FULL OUTER JOIN
    5. ALIASING
    """)

    st.write("""
    These intermediate SQL concepts will help you manipulate and combine data more effectively. Let's go over each objective with examples, hints, and expected outputs.
    """)

    st.write('---')

    # INNER JOIN section
    st.header("1 - INNER JOIN")
    st.write("""
    The `INNER JOIN` selects records that have matching values in both tables. It's the most commonly used type of join.
    """)

    st.subheader("EXAMPLE : ")
    st.write("Retrieve planet names and their corresponding mission names using INNER JOIN")
    st.write("""
    ```sql
    SELECT planets.planet_name, missions.mission_name
    FROM planets
    INNER JOIN missions ON planets.planet_id = missions.planet_id;
    ```
    This query retrieves all planets and their respective missions by matching `planet_id`.
    """)

    st.write("""
    **Expected Output**:
    | planet_name | mission_name    |
    |-------------|-----------------|
    | Mars        | Mars Rover      |
    | Jupiter     | Jupiter Probe   |
    | Saturn      | Saturn Orbiter  |
    """)

    st.write("\n" * 5)

    st.write("---")

    # LEFT JOIN section
    st.header("2 - LEFT JOIN")
    st.write("""
    The `LEFT JOIN` returns all records from the left table (e.g., `PLANETS`), and the matched records from the right table (e.g., `MISSIONS`). If thereâ€™s no match, NULL values will be returned.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Retrieve planet names and their corresponding mission names, but include planets with no missions.")
    st.write("""
    ```sql
    SELECT planets.planet_name, missions.mission_name
    FROM planets
    LEFT JOIN missions ON planets.planet_id = missions.planet_id;
    ```
    This query returns all planets, even those with no missions.
    """)

    st.write("""
    **Expected Output**:
    | planet_name | mission_name    |
    |-------------|-----------------|
    | Mars        | Mars Rover      |
    | Jupiter     | Jupiter Probe   |
    | Saturn      | NULL            |
    """)

    st.write("\n" * 5)

    st.write("---")

    # RIGHT JOIN section
    st.header("3 - RIGHT JOIN")
    st.write("""
    The `RIGHT JOIN` returns all records from the right table (e.g., `MISSIONS`), and the matched records from the left table (e.g., `PLANETS`). If thereâ€™s no match, NULL values will be returned.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Retrieve mission names and their corresponding planet names, but include all missions even if they donâ€™t have a corresponding planet.")
    st.write("""
    ```sql
    SELECT planets.planet_name, missions.mission_name
    FROM planets
    RIGHT JOIN missions ON planets.planet_id = missions.planet_id;
    ```
    This query returns all missions, even those without corresponding planets.
    """)

    st.write("""
    **Expected Output**:
    | planet_name | mission_name    |
    |-------------|-----------------|
    | Mars        | Mars Rover      |
    | NULL        | Unknown Mission |
    """)

    st.write("\n" * 5)

    st.write("---")

    # FULL OUTER JOIN section
    st.header("4 - FULL OUTER JOIN")
    st.write("""
    The `FULL OUTER JOIN` returns all records when there is a match in either the left or right table. If there is no match, NULL values will be returned for unmatched records.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Retrieve all planet names and mission names, including planets without missions and missions without planets.")
    st.write("""
    ```sql
    SELECT planets.planet_name, missions.mission_name
    FROM planets
    FULL OUTER JOIN missions ON planets.planet_id = missions.planet_id;
    ```
    This query retrieves all planets and missions, including unmatched rows.
    """)

    st.write("""
    **Expected Output**:
    | planet_name | mission_name    |
    |-------------|-----------------|
    | Mars        | Mars Rover      |
    | Jupiter     | NULL            |
    | NULL        | Unknown Mission |
    """)

    st.write("\n" * 5)

    st.write("---")

    # Aliasing Section (last objective)
    st.header("5 - ALIASING")
    st.write("- **Aliasing**")
    st.write("""
    Aliasing allows you to assign temporary names to tables or columns in your SQL queries, making the code easier to read and write. You can create aliases using the `AS` keyword.
    """)

    st.subheader("EXAMPLE: Create an alias for a column and a table.")
    st.write("""
    ```sql
    SELECT p.planet_name AS name, m.mission_name AS mission
    FROM planets AS p
    INNER JOIN missions AS m ON p.planet_id = m.planet_id;
    ```
    This query creates aliases for both the table names (`planets` as `p`, `missions` as `m`) and the column names (`planet_name` as `name`, `mission_name` as `mission`).
    """)

    st.write("""
    **Expected Output**:
    | name     | mission          |
    |----------|------------------|
    | Mars     | Mars Rover       |
    | Jupiter  | Jupiter Probe    |
    | Saturn   | Saturn Orbiter   |
    """)

    st.write("\n" * 5)

    st.write("---")

    # Add a congratulatory message for completing the intermediate objectives
    st.write("---")  # Add a divider for separation
    st.markdown("<h2 style='text-align: center;'>ðŸŽ‰ Congratulations on Completing the Intermediate SQL Objectives!</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>Now that you've learned about SQL Joins and Aliasing, you can test your skills or move to the next section for more advanced concepts!</h3>", unsafe_allow_html=True)


# Advanced Subqueries Tab
with tabs[3]:
    st.title("Advanced SQL Objectives:")

    st.write("""
    1. ORDER BY
    2. GROUP BY / HAVING
    3. SUBQUERIES
    4. COMMON TABLE EXPRESSIONS (CTEs)
    """)

    st.write("""
    These advanced SQL concepts will help you manage, organize, and retrieve data more efficiently. Let's go over each objective with examples, hints, and expected outputs.
    """)

    st.write('---')

    # ORDER BY section
    st.header("1 - ORDER BY")
    st.write("""
    The `ORDER BY` clause is used to sort the result set in either ascending (`ASC`) or descending (`DESC`) order based on one or more columns.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Retrieve planet names and sort them by distance from Earth in descending order")
    st.write("""
    ```sql
    SELECT planet_name, distance_from_earth
    FROM planets
    ORDER BY distance_from_earth DESC;
    ```
    This query retrieves the planet names and sorts them based on their distance from Earth in descending order.
    """)

    st.write("""
    **Expected Output**:
    | planet_name | distance_from_earth |
    |-------------|---------------------|
    | Pluto       | 5906                |
    | Neptune     | 4495                |
    | Uranus      | 2871                |
    """)

    st.write("\n" * 5)

    st.write("---")

    # GROUP BY / HAVING section
    st.header("2 - GROUP BY / HAVING")
    st.write("""
    The `GROUP BY` clause groups rows that have the same values in specified columns. Itâ€™s often used with aggregate functions (`COUNT`, `SUM`, `AVG`, etc.). The `HAVING` clause is used to filter groups based on a condition.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Group missions by planet and count how many missions each planet has")
    st.write("""
    ```sql
    SELECT planet_id, COUNT(mission_id) AS total_missions
    FROM missions
    GROUP BY planet_id;
    ```
    This query counts the total number of missions for each planet.
    """)

    st.write("""
    **Expected Output**:
    | planet_id | total_missions |
    |-----------|----------------|
    | 1         | 2              |
    | 2         | 1              |
    | 3         | 1              |
    """)

    st.write("\n" * 5)

    st.subheader("EXAMPLE :") 
    st.write("Use HAVING to filter planets with more than 1 mission")
    st.write("""
    ```sql
    SELECT planet_id, COUNT(mission_id) AS total_missions
    FROM missions
    GROUP BY planet_id
    HAVING COUNT(mission_id) > 1;
    ```
    This query filters planets that have more than 1 mission.
    """)

    st.write("""
    **Expected Output**:
    | planet_id | total_missions |
    |-----------|----------------|
    | 1         | 2              |
    """)

    st.write("\n" * 5)

    st.write("---")

    # Subqueries section
    st.header("3 - SUBQUERIES")
    st.write("""
    A **subquery** is a query nested inside another query. Subqueries allow you to run multiple queries within a single SQL statement and can be used for filtering, calculating values, and more.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Retrieve planets with more than one mission using a subquery")
    st.write("""
    ```sql
    SELECT planet_name
    FROM planets
    WHERE planet_id IN (
      SELECT planet_id
      FROM missions
      GROUP BY planet_id
      HAVING COUNT(mission_id) > 1
    );
    ```
    This subquery first identifies the `planet_id` of planets with more than one mission. The outer query retrieves the names of those planets.
    """)

    st.write("""
    **Expected Output**:
    | planet_name |
    |-------------|
    | Mars        |
    """)

    st.write("\n" * 5)

    st.write("---")

    # CTEs section
    st.header("4 - COMMON TABLE EXPRESSIONS (CTEs)")
    st.write("""
    A **Common Table Expression (CTE)** is a temporary result set defined within the execution scope of a `SELECT`, `INSERT`, `UPDATE`, or `DELETE` statement. CTEs make complex queries easier to manage and read.
    """)

    st.subheader("EXAMPLE :") 
    st.write("Use a CTE to find the total number of missions to each planet")
    st.write("""
    ```sql
    WITH mission_counts AS (
      SELECT planet_id, COUNT(mission_id) AS total_missions
      FROM missions
      GROUP BY planet_id
    )
    SELECT planets.planet_name, mission_counts.total_missions
    FROM planets
    INNER JOIN mission_counts ON planets.planet_id = mission_counts.planet_id;
    ```
    This query first calculates the total number of missions per planet in the CTE and then joins the results to retrieve the planet names.
    """)

    st.write("""
    **Expected Output**:
    | planet_name | total_missions |
    |-------------|----------------|
    | Mars        | 2              |
    """)

    st.write("\n" * 5)

    st.write("---")

    # Add a congratulatory message for completing the advanced objectives
    st.write("---")  # Add a divider for separation
    st.markdown("<h2 style='text-align: center;'>ðŸŽ‰ Congratulations on Completing the Advanced SQL Objectives!</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>You have now mastered ORDER BY, GROUP BY/HAVING, Subqueries, and CTEs! Now, test your skills with more challenging problems or revisit previous sections for review.</h3>", unsafe_allow_html=True)


