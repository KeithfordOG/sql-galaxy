import streamlit as st
import pandas as pd
import sqlparse
from db_utils import execute_sql_query  # Ensure you're importing the function from db_utils

# Sample data for planets, missions, and moons (replace with your actual data source)
planets_df = pd.read_csv('db/planets.csv')
missions_df = pd.read_csv('db/missions.csv')
moons_df = pd.read_csv('db/moons.csv')

#Title
st.title('ADVANCED')

# Image Header for Advanced Mode
st.image("images/hercules_supercluster.png", "Hercules SuperCluster (Supercluster Galaxy) *Generated by ChatGPT", use_column_width=True)

# List of advanced queries focusing on subqueries and CTEs
advanced_queries = [
    "Find the planet with the most moons using a subquery.",
    "Retrieve the mission name and crew size for all missions where the destination planet is further than 500 million km from Earth, using a subquery.",
    "Write a query to find the total number of missions where the crew size was larger than the average crew size of all missions, using a subquery.",
    "Find the missions where the destination planet has more than 2 moons, using a subquery.",
    "Write a query to retrieve the planets that have more moons than the average number of moons for all planets, using a CTE."
]

# Correct answers indexed by question number for advanced difficulty
advanced_answers = [
    # Question 1 - Planet with the most moons
    [
        "SELECT p.planet_name FROM planets p WHERE p.planet_id = (SELECT m.planet_id FROM moons m GROUP BY m.planet_id ORDER BY COUNT(*) DESC LIMIT 1);",
        "SELECT planet_name FROM planets WHERE planet_id = (SELECT planet_id FROM moons GROUP BY planet_id ORDER BY COUNT(*) DESC LIMIT 1);"
    ],
    
    # Question 2 - Missions to planets further than 500 million km from Earth
    [
        "SELECT mission_name, crew_size FROM missions WHERE planet_id IN (SELECT planet_id FROM planets WHERE distance_from_earth > 500);",
        "SELECT mission_name, crew_size FROM missions m WHERE EXISTS (SELECT 1 FROM planets p WHERE p.planet_id = m.planet_id AND p.distance_from_earth > 500);",
        "SELECT m.mission_name, m.crew_size FROM missions m JOIN planets p ON m.planet_id = p.planet_id WHERE p.distance_from_earth > 500;"
    ],
    
    # Question 3 - Missions with crew size larger than the average
    [
        "SELECT COUNT(*) FROM missions WHERE crew_size > (SELECT AVG(crew_size) FROM missions);",
        "SELECT m.mission_name, m.crew_size FROM missions m WHERE m.crew_size > (SELECT AVG(crew_size) FROM missions);",
        "SELECT m.mission_name, m.crew_size FROM missions m JOIN (SELECT AVG(crew_size) AS avg_crew FROM missions) avg_table ON m.crew_size > avg_table.avg_crew;"
    ],
    
    # Question 4 - Missions to planets with more than 2 moons
    [
        "SELECT mission_name FROM missions WHERE planet_id IN (SELECT planet_id FROM moons GROUP BY planet_id HAVING COUNT(moon_id) > 2);",
        "SELECT mission_name FROM missions m WHERE EXISTS (SELECT 1 FROM moons mo WHERE mo.planet_id = m.planet_id GROUP BY mo.planet_id HAVING COUNT(mo.moon_id) > 2);"
    ],
    
    # Question 5 - Planets with more moons than the average (using CTE)
    [
        """
        WITH moon_counts AS (
            SELECT planet_id, COUNT(moon_id) AS num_moons
            FROM moons
            GROUP BY planet_id
        ), average_moons AS (
            SELECT AVG(num_moons) AS avg_moons FROM moon_counts
        )
        SELECT planet_name
        FROM planets
        WHERE planet_id IN (
            SELECT planet_id FROM moon_counts WHERE num_moons > (SELECT avg_moons FROM average_moons)
        );
        """,
        """
        WITH moon_counts AS (
            SELECT m.planet_id, COUNT(m.moon_id) AS num_moons
            FROM moons m
            GROUP BY m.planet_id
        )
        SELECT p.planet_name
        FROM planets p
        JOIN moon_counts mc ON p.planet_id = mc.planet_id
        WHERE mc.num_moons > (SELECT AVG(mc.num_moons) FROM moon_counts mc);
        """
    ]
]

# Hints for each question
advanced_hints = [
    "Use `p` for planets and `m` for moons in your query. Try using a `GROUP BY` to count the number of moons and order by the count in descending order.",
    "Use a subquery to filter for planets where the distance from Earth is greater than 500 million km. You can also use `IN` or `EXISTS`.",
    "Use the `AVG()` function in your subquery to calculate the average crew size, and compare each mission's crew size to that average.",
    "Use `HAVING COUNT(moon_id) > 2` in your subquery to filter for planets with more than 2 moons.",
    "Use a CTE to calculate the average number of moons and filter planets that have more moons than this average."
]

# Function to normalize and format SQL query
def normalize_sql(query):
    return sqlparse.format(query, reindent=True, keyword_case='upper').strip()

# Initialize session state to track correctness
if 'answer_correct_advanced' not in st.session_state:
    st.session_state.answer_correct_advanced = [False] * len(advanced_queries)  # Track correctness for each advanced question

if 'questions_completed' not in st.session_state:
    st.session_state.questions_completed = 0

# Create tabs for each advanced question
tabs = st.tabs([f"Question {i+1} " for i in range(len(advanced_queries))])

# Loop through each question and set up a tab
for i, query in enumerate(advanced_queries):
    with tabs[i]:
        st.title(f"Question {i+1} ‚ú® ")
        st.write(query)

        # Use text_area for multi-line input
        user_answer = st.text_area(f"Your Answer for Question {i+1}", key=f"advanced_answer_{i}")

        # Hint section
        with st.expander("Need a hint?"):
            st.write(advanced_hints[i])

        # Submit button for each question
        if st.button(f"Submit Answer for Question {i+1}", key=f"submit_advanced_{i}"):
            # Normalize user's answer and correct answers
            normalized_user_answer = normalize_sql(user_answer)
            normalized_correct_answers = [normalize_sql(answer) for answer in advanced_answers[i]]

            # Always run the user's query and show the result (even if it's wrong)
            st.write(f"Your Attempted Query: \n```sql\n{user_answer}\n```")
            try:
                query_result = execute_sql_query(user_answer)  # Execute the user's SQL query
                st.write(query_result)  # Show the SQL query result
            except Exception as e:
                st.error(f"Error running query: {e}")

            # Check if the user's answer matches any normalized correct solutions
            if normalized_user_answer in normalized_correct_answers:
                if not st.session_state.answer_correct_advanced[i]:  # Ensure it's the first time this question is correct
                    st.session_state.questions_completed += 1  # Increment completed count only once
                    st.session_state.answer_correct_advanced[i] = True
                st.success("Great job! That's correct.")
            else:
                st.error("Incorrect answer. Please try again.")

        # Display the correct answer if the user has answered correctly
        if st.session_state.answer_correct_advanced[i]:
            st.write(f"You've answered Question {i+1} correctly.")

# Show progress
st.subheader(f"Progress: {st.session_state.questions_completed} out of {len(advanced_queries)} questions completed! üë©‚ÄçüöÄ ")

# Schema Title
st.title('Schema')

# Planets Table including the title and csv in a static table
st.subheader('üåç Planets Table')
st.write(planets_df)

# Missions Table including the title and csv in a static table
st.subheader('üöÄ Missions Table')
st.write(missions_df)

# Moons Table including the title and csv in a static table
st.subheader('üåï  Moons Table')
st.write(moons_df)
