import streamlit as st
import pandas as pd
import sqlparse
import psycopg2
from urllib.parse import urlparse

# PostgreSQL Database connection using Streamlit secrets
def create_connection():
    try:
        # Retrieve the database URL from Streamlit secrets
        url = st.secrets["postgresql"]["DB_URL"]
        
        # Parse the URL to extract connection parameters
        parsed_url = urlparse(url)
        
        # Connect to the PostgreSQL database
        conn = psycopg2.connect(
            host=parsed_url.hostname,
            database=parsed_url.path[1:],  # Remove leading '/'
            user=parsed_url.username,
            password=parsed_url.password,
            port=parsed_url.port
        )
        return conn
    except Exception as e:
        st.error(f"Error connecting to the database: {e}")
        return None

# Function to execute SQL query and return result as a Pandas DataFrame
def execute_sql_query(query):
    conn = create_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute(query)
            columns = [desc[0] for desc in cur.description]  # Get column names
            result = cur.fetchall()  # Fetch all rows
            cur.close()
            conn.close()
            if not result:
                st.warning("The query executed but returned no results.")
            return pd.DataFrame(result, columns=columns)  # Return result as a DataFrame
        except Exception as e:
            st.error(f"Error executing query: {e}")
            return None
    else:
        return None


# Title
st.title('BEGINNER')

# Image Header for Milky Way (Easy Mode)
st.image("images/milkyway.png", "*Milky Way (Galaxy) *Generated by ChatGPT4", use_column_width=True)

# List of easy queries for Milky Way mode
milkyway_queries = [
    "Retrieve all records from the planets table.",
    "How would you count the number of missions in the missions table?",
    "What is the SQL query to find the discoverer of the planet Venus (you can use either the planet's name or its ID)?",
    "Write a SQL query to retrieve all missions after the year 2000.",
    "Write a SQL query to return all the moons that start with the letter 'C'."
]

# Correct answers indexed by question number for Milky Way difficulty
milkyway_answers = [
    [
        "SELECT * FROM planets;",  # Basic SELECT *
        "SELECT planet_id, planet_name, distance_from_sun FROM planets;",  # Explicit column names
    ],
    [
        "SELECT COUNT(*) FROM missions;",  # Basic count of all rows
    ],
    [
        "SELECT discoverer FROM planets WHERE planet_name = 'Venus';",  # planet_name method
        "SELECT discoverer FROM planets WHERE planet_id = 6;",  # planet_id method
    ],
    [
        # Different ways to retrieve all missions after the year 2000
        "SELECT * FROM missions WHERE mission_date > '2000-01-01';",  # Using a direct date comparison
        "SELECT mission_id, mission_name, mission_date FROM missions WHERE mission_date > '2000-01-01';",  # Using specific columns
        "SELECT * FROM missions WHERE EXTRACT(YEAR FROM mission_date) > 2000;",  # Using EXTRACT function to extract the year from the date
        "SELECT * FROM missions WHERE YEAR(mission_date) > 2000;",  # Using the YEAR() function (for MySQL-style syntax)
    ],
    [
        # Ways to return all moons that start with 'C'
        "SELECT * FROM moons WHERE moon_name LIKE 'C%';",  # Basic query using LIKE and wildcard %
        "SELECT moon_id, moon_name FROM moons WHERE moon_name LIKE 'C%';",  # Using specific columns
        "SELECT * FROM moons WHERE LEFT(moon_name, 1) = 'C';",  # Using the LEFT() function to extract the first letter
        "SELECT * FROM moons WHERE moon_name ILIKE 'C%';",  # Using ILIKE for case-insensitive search (PostgreSQL-specific)
    ]
]

# Hints for each question
milkyway_hints = [
    "Use `SELECT * FROM` to retrieve all columns from a table, or explicitly list column names if desired.",
    "Use `COUNT(*)` to count all rows in the missions table.",
    "You can filter by `planet_name = 'Venus'` or `planet_id = 6`.",
    "Use `WHERE mission_date > '2000-01-01'` to retrieve all missions after a specific date. Alternatively, you can use `EXTRACT(YEAR FROM mission_date) > 2000` or `YEAR(mission_date) > 2000` (depending on your SQL flavor) to focus on just the year component.",
    "Use `WHERE moon_name LIKE 'C%'` to find moons that start with 'C'. You can also use `LEFT(moon_name, 1) = 'C'` or, in PostgreSQL, `ILIKE` for case-insensitive searches."
]

# Function to normalize and format SQL query
def normalize_sql(query):
    return sqlparse.format(query, reindent=True, keyword_case='upper').strip()

# Initialize session state to track correctness for Milky Way
if 'answer_correct_milkyway' not in st.session_state:
    st.session_state.answer_correct_milkyway = [False] * len(milkyway_queries)
if 'questions_completed' not in st.session_state:
    st.session_state.questions_completed = 0

# Create tabs for Easy Mode questions without "Milky Way" in the tab names
tabs = st.tabs([f"Question {i+1}" for i in range(len(milkyway_queries))])

# Loop through each question and set up a tab
for i, query in enumerate(milkyway_queries):
    with tabs[i]:
        st.title(f"Question {i+1} ‚ú®")
        st.write(query)

        # Use text_area for multi-line input
        user_answer = st.text_area(f"Your Answer for Question {i+1}", key=f"milkyway_answer_{i}")

        # Hint section
        with st.expander("Need a hint?"):
            st.write(milkyway_hints[i])

        # Submit button for each question
        if st.button(f"Submit Answer for Question {i+1}", key=f"submit_milkyway_{i}"):
            # Normalize user's answer and correct answers
            normalized_user_answer = normalize_sql(user_answer)
            normalized_correct_answers = [normalize_sql(answer) for answer in milkyway_answers[i]]

            # Always run the user's query and show the result (even if it's wrong)
            st.write(f"Your Attempted Query: \n```sql\n{user_answer}\n```")
            try:
                query_result = execute_sql_query(user_answer)  # Execute the user's SQL query
                if query_result is not None and not query_result.empty:
                    st.dataframe(query_result)  # Show the SQL query result as a table
                else:
                    st.error("No data returned from the query.")
            except Exception as e:
                st.error(f"Error running query: {e}")

            # Check if the user's answer matches any normalized correct solutions
            if normalized_user_answer in normalized_correct_answers:
                if not st.session_state.answer_correct_milkyway[i]:  # Ensure it's the first time this question is correct
                    st.session_state.questions_completed += 1  # Increment completed count only once
                    st.session_state.answer_correct_milkyway[i] = True
                st.success("Great job! That's correct.")
            else:
                st.error("Incorrect answer. Please try again.")

        # Display the correct answer if the user has answered correctly
        if st.session_state.answer_correct_milkyway[i]:
            st.write(f"You've answered Question {i+1} correctly.")

# Show progress
st.subheader(f"Progress: {st.session_state.questions_completed} out of {len(milkyway_queries)} questions completed! üë©‚ÄçüöÄ")



# Schema Title
st.title('Schema')

# Planets Table (Fetched from PostgreSQL)
st.subheader('üåç Planets Table')
st.write("This table contains detailed information about planets, including their distance from the sun, discoverers, and unique IDs.")
planets_query = "SELECT * FROM planets;"  # Query the planets table from PostgreSQL
planets_df = execute_sql_query(planets_query)
st.write(planets_df)

# Missions Table (Fetched from PostgreSQL)
st.subheader('üöÄ Missions Table')
st.write("This table contains the details of various space missions, including their destination planets and crew sizes.")
missions_query = "SELECT * FROM missions;"  # Query the missions table from PostgreSQL
missions_df = execute_sql_query(missions_query)
st.write(missions_df)

# Moons Table (Fetched from PostgreSQL)
st.subheader('üåï Moons Table')
st.write("This table tracks all the moons, their diameters, discoverers, and the planets they orbit.")
moons_query = "SELECT * FROM moons;"  # Query the moons table from PostgreSQL
moons_df = execute_sql_query(moons_query)
st.write(moons_df)
